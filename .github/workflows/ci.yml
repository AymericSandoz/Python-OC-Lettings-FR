# # This workflow will install Python dependencies, run tests and lint with a single version of Python
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# name: Python application

# on:
#   push:
#     branches: ["master"]
#   pull_request:
#     branches: ["master"]

# permissions:
#   contents: read

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4
#       - name: Set up Python 3.10
#         uses: actions/setup-python@v3
#         with:
#           python-version: "3.10"
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 pytest
#           if [ -f requirements.txt ]; then pip install -r requirements.txt;
#       - name: Run linting
#         run: |
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

#       - name: Run tests with coverage
#         run: |
#           pytest --cov=myapp
#       - name: Verify coverage
#         run: |
#           coverage report --fail-under=80
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Build and push
#         uses: docker/build-push-action@v6
#         with:
#           push: true
#           tags: sandozaymeric/p13-oc-lettings-app

name: CI/CD Pipeline

on:
  push:
    branches:
      - master # Pour déclencher les workflows de conteneurisation et déploiement
    # pull_request:
    #   branches:
    #     - "*" # Pour déclencher les tests uniquement sur les PR
    pull_request:
      branches: ["master"]

jobs:
  # Job de tests et linting
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Run linting
      #   run: |
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests with coverage
        run: |
          pytest --cov
      - name: Verify coverage
        run: |
          coverage report --fail-under=70

  # Job de conteneurisation
  build_and_push:
    runs-on: ubuntu-latest
    needs: test # Ne s’exécute que si le job de test réussit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and tag Docker image
        run: |
          docker build -t oc-lettings-app-test:${{ github.sha }} .
          docker tag oc-lettings-app-test:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/oc-lettings-app-test:${{ github.sha }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/oc-lettings-app-test:${{ github.sha }}

  # Job de déploiement sur Render
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push # Ne s'exécute que si la conteneurisation réussit
    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          # Commande pour déclencher le déploiement Render via l'API CLI
          render deploy my-service --image ${{ secrets.DOCKER_USERNAME }}/oc-lettings-app-test:${{ github.sha }}
